#Server configurations:
server.address=0.0.0.0
server.port=8080
#server.ssl.key-store=src/main/resources/JAN_key.jks
server.ssl.key-store=/app/JAN_key.jks
server.ssl.key-store-password=secret
server.ssl.key-alias=JAN_key
server.ssl.key-password=secret
#spring.graphql.cors.allowed-origins=*

spring.data.mongodb.uri=${MOGODB_URI}

server.error.include-message=always
server.error.include-binding-errors=always

#JWT Token
jwt.secret-key=${JWT_SECRET}

#Cloudcarafka
spring.kafka.bootstrap-servers=glider.srvs.cloudkafka.com:9094
spring.kafka.properties.security.protocol=SASL_SSL
spring.kafka.properties.sasl.mechanism=SCRAM-SHA-256
spring.kafka.properties.sasl.jaas.config=${KAFKA_CONFIG}


spring.cloud.function.definition=receiveDataFromProblem;receiveDataFromComment;receiveDataFromSolution;sendProfile;
#OUT
#Send authenticated Profile everyone ->
spring.cloud.stream.bindings.sendProfile-out-0.destination=${KAFKA_KEY}-authenticated
#IN
# Problem data ->
spring.cloud.stream.bindings.receiveDataFromProblem-in-0.destination=${KAFKA_KEY}-problemData
spring.cloud.stream.bindings.receiveDataFromProblem-in-0.group=${KAFKA_KEY}-problemDataGroup
# Comment data ->
spring.cloud.stream.bindings.receiveDataFromComment-in-0.destination=${KAFKA_KEY}-commentData
spring.cloud.stream.bindings.receiveDataFromComment-in-0.group=${KAFKA_KEY}-commentDataGroup
# Solution data ->
spring.cloud.stream.bindings.receiveDataFromSolution-in-0.destination=${KAFKA_KEY}-solutionData
spring.cloud.stream.bindings.receiveDataFromSolution-in-0.group=${KAFKA_KEY}-solutionDataGroup

#Spring-boot-starter-mail configurations:
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${EMAIL_ADDRESS}
spring.mail.password=${EMAIL_PASSWORD}

spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.port=587

